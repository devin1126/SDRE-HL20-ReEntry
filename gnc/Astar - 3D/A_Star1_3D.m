clf
clear all
%DEFINE THE 3-D MAP ARRAY
MAX_X=40;
MAX_Y=40;
MAX_Z=40;

% Map Properties
axis([-MAX_X-1 MAX_X+1 -MAX_Y-1 MAX_Y+1 -MAX_Z-1 MAX_Z+1])
grid on;
hold on;

%This array stores the coordinates of the map and the 
%Objects in each coordinate
MAP=2*(ones(2*MAX_X, 2*MAX_Y, 2*MAX_Z));

% Inital Robot Position
xStart = -20;
yStart = 0;
zStart = 40;

% Mapping & Plotting Starting Position
[xStart_ind, yStart_ind, zStart_ind] = WaypointMapper3D(xStart, yStart, zStart, MAX_X, MAX_Y, MAX_Z,-MAX_X, -MAX_Y, -MAX_Z);
MAP(xStart_ind, yStart_ind, zStart_ind) = 1;
plot3(xStart+.5, yStart+.5, zStart+.5, 'bo');


% Goal Robot Position
xTarget = 40;
yTarget = 0;
zTarget = -20;


% Mapping & Plotting Goal Position
[xTarget_ind, yTarget_ind, zTarget_ind] = WaypointMapper3D(xTarget, yTarget, zTarget, MAX_X, MAX_Y, MAX_Z,-MAX_X, -MAX_Y, -MAX_Z);
MAP(xTarget_ind, yTarget_ind, zTarget_ind)=0;   %Initialize MAP with location of the target
plot3(xTarget+.5,yTarget+.5, zTarget+.5,'gd');
text(xTarget+1,yTarget+1, zTarget+1,'Target')

%End of obstacle-Target pickup

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%LISTS USED FOR ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%OPEN LIST STRUCTURE
%--------------------------------------------------------------------------
%IS ON LIST 1/0 |X val |Y val |Z val |Parent X val |Parent Y val |Parent Z val |h(n) |g(n)|f(n)|
%--------------------------------------------------------------------------
OPEN=[];

%CLOSED LIST STRUCTURE
%--------------
%X val | Y val | Z val
%--------------

CLOSED=[];
CLOSED_COUNT=size(CLOSED,1);

%set the starting node as the first node
xNode = xStart;
yNode = yStart;
zNode = zStart;
OPEN_COUNT = 1;
path_cost = 0;
goal_distance=distance(xNode,yNode,zNode,xTarget,yTarget,zTarget);
OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,zNode,xNode,yNode,zNode,path_cost,goal_distance,goal_distance);
OPEN(OPEN_COUNT,1)=0;
CLOSED_COUNT=CLOSED_COUNT+1;
CLOSED(CLOSED_COUNT,1)=xNode;
CLOSED(CLOSED_COUNT,2)=yNode;
CLOSED(CLOSED_COUNT,3)=zNode;
NoPath=1;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
while((xNode ~= xTarget || yNode ~= yTarget || zNode ~= zTarget) && NoPath == 1)
%  plot(xNode+.5,yNode+.5,'go');
 exp_array=expand_array(xNode,yNode,zNode,path_cost,xTarget,yTarget,zTarget,CLOSED,MAX_X,MAX_Y,MAX_Z);
 exp_count=size(exp_array,1);
 %UPDATE LIST OPEN WITH THE SUCCESSOR NODES
 %OPEN LIST FORMAT
 %--------------------------------------------------------------------------
 %IS ON LIST 1/0 |X val |Y val |Z val |Parent X val |Parent Y val |Parent Z val |h(n)|g(n)|f(n)| (10 elements) 
 %--------------------------------------------------------------------------
 %EXPANDED ARRAY FORMAT
 %--------------------------------
 %|X val |Y val |Z val |h(n) |g(n)|f(n)| (6 elements)
 %--------------------------------
 for i=1:exp_count
    flag=0;
    for j=1:OPEN_COUNT
        if(exp_array(i,1) == OPEN(j,2) && exp_array(i,2) == OPEN(j,3) && exp_array(i,3) == OPEN(j, 4))
            OPEN(j,10)=min(OPEN(j,10),exp_array(i,6)); %#ok<*SAGROW>
            if OPEN(j,8)== exp_array(i,6)
                %UPDATE PARENTS,g(n),h(n)
                OPEN(j,5)=xNode;
                OPEN(j,6)=yNode;
                OPEN(j,7)=zNode;
                OPEN(j,8)=exp_array(i,4); %h(n)
                OPEN(j,9)=exp_array(i,5); %g(n)
            end
            flag=1;
        end
    end
    
    if flag == 0
        OPEN_COUNT = OPEN_COUNT+1;
        OPEN(OPEN_COUNT,:)=insert_open(exp_array(i,1),exp_array(i,2),exp_array(i,3),xNode,yNode,zNode,exp_array(i,4),exp_array(i,5),exp_array(i,6));
    end
 end
 
 %Find out the node with the smallest fn 
 index_min_node = min_fn(OPEN,OPEN_COUNT,xTarget,yTarget,zTarget);
 if (index_min_node ~= -1)    
     %Set xNode and yNode to the node with minimum fn
     xNode=OPEN(index_min_node,2);
     yNode=OPEN(index_min_node,3);
     zNode=OPEN(index_min_node,4);
     path_cost=OPEN(index_min_node,8);%Update the cost of reaching the parent node
  
     %Move the Node to list CLOSED
     CLOSED_COUNT=CLOSED_COUNT+1;
     CLOSED(CLOSED_COUNT,1)=xNode;
     CLOSED(CLOSED_COUNT,2)=yNode;
     CLOSED(CLOSED_COUNT,3)=zNode;
     OPEN(index_min_node,1)=0;
 else
      NoPath=0;%Exits the loop!
 end
 
end
 
%Once algorithm has run The optimal path is generated by starting of at the
%last node(if it is the target node) and then identifying its parent node
%until it reaches the start node.This is the optimal path

i=size(CLOSED,1);
Optimal_path=[];
xval=CLOSED(i,1); %Target x
yval=CLOSED(i,2); %Target y
zval=CLOSED(i,3); %Target z
i=1;
Optimal_path(i,1)=xval;
Optimal_path(i,2)=yval;
Optimal_path(i,3)=zval;
i=i+1;

if ((xval == xTarget) && (yval == yTarget) && (zval == zTarget))
   inode=0;
   %Traverse OPEN and determine the parent nodes
   parent_x=OPEN(node_index(OPEN,xval,yval,zval),5);%node_index returns the index of the node
   parent_y=OPEN(node_index(OPEN,xval,yval,zval),6);
   parent_z=OPEN(node_index(OPEN,xval,yval,zval),7);
   
   while( parent_x ~= xStart || parent_y ~= yStart || parent_z ~= zStart)
           Optimal_path(i,1) = parent_x;
           Optimal_path(i,2) = parent_y;
           Optimal_path(i,3) = parent_z;
           %Get the grandparents:-)
           inode=node_index(OPEN,parent_x,parent_y,parent_z);
           parent_x = OPEN(inode,5);%node_index returns the index of the node
           parent_y = OPEN(inode,6);
           parent_z = OPEN(inode,7);
           i=i+1;
   end
 j=size(Optimal_path,1);
 %Plot the Optimal Path!
 
 rotate3d on
 
 p=plot3(Optimal_path(j,1)+.5,Optimal_path(j,2)+.5,Optimal_path(j,3),'bo');
 j=j-1;
 for i=j:-1:1
  pause(.25);
  set(p,'XData',Optimal_path(i,1)+.5,'YData',Optimal_path(i,2)+.5,'ZData',Optimal_path(i,3)+.5);
 drawnow ;
 end
 plot3(Optimal_path(:,1)+.5,Optimal_path(:,2)+.5,Optimal_path(:,3)+.5);
else
 pause(1);
 h=msgbox('Sorry, No path exists to the Target!','warn');
 uiwait(h,5);
end

    





